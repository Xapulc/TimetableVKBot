import asyncio
import json
import os

import numpy as np
from loguru import logger

from vkbottle import Bot, Message
from vkbottle.api.keyboard import Keyboard, Text

from Timetable import Timetable


class TimetableBot(Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        config_path = "timetable_config.json"

        assert os.path.exists(config_path), f"Config file {config_path} not found."
        with open(config_path, "r") as timetable_file:
            timetables_json = json.load(timetable_file)
            self._admins = timetables_json["admins"]
            self._timetables = {timetable.pop("peer_id"): Timetable(timetable)
                                for timetable in timetables_json["timetables"]}
            self._timetable_work_flg = False

    def _generate_keyboard(self, peer_id, chat_flg=False) -> str:
        admin_flg = peer_id in self._admins
        keyboard = Keyboard(one_time=not admin_flg and chat_flg)
        if not self._timetable_work_flg and admin_flg:
            keyboard.add_row()
            keyboard.add_button(Text("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."), color="positive")
        keyboard.add_row()
        keyboard.add_button(Text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."), color="positive")
        keyboard.add_row()
        keyboard.add_button(Text("–î–∞ –∏–ª–∏ –Ω–µ—Ç?"), color="primary")
        keyboard.add_row()
        keyboard.add_button(Text("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å."))
        return keyboard.generate()

    async def get_answer(self, ans: Message, message: str, chat_flg: bool = None):
        logger.info(ans)
        if message.lower() in ["", ".", ",", "–ø—Ä–∏–≤–µ—Ç"]:
            await ans("–ü—Ä–∏–≤–µ—Ç! üòä", keyboard=self._generate_keyboard(ans.peer_id, chat_flg))
        elif message == "/get_peer_id":
            await ans(f"peer_id = {ans.peer_id}")
        elif message == "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.":
            if ans.from_id in self._admins:
                if not self._timetable_work_flg:
                    self._timetable_work_flg = True
                    await ans("–ü—Ä–∏–≤–µ—Ç. –°–ª–µ–¥—É—é—â–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã:\n"
                              + "\n".join("üìÖ " + str(timetable) for timetable in self._timetables.values()),
                              keyboard=self._generate_keyboard(ans.peer_id, chat_flg))

                    while True:
                        messages_flg = False
                        for peer_id, timetable in self._timetables.items():
                            answer = timetable.make_notification(time="now")
                            if answer is not None:
                                messages_flg = True
                                await self.api.messages.send(message=answer, peer_id=peer_id, random_id=0)

                        if messages_flg:
                            await asyncio.sleep(120)
                        else:
                            await asyncio.sleep(15)
                else:
                    await ans("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã.")
            else:
                await ans("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")
        elif message == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.":
            if ans.peer_id in self._timetables.keys():
                answer = self._timetables[ans.peer_id].make_notification(time="today")
                if answer is None:
                    answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–µ –∏–º–µ—é –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
                await self.api.messages.send(message=answer, peer_id=ans.peer_id, random_id=0)
            else:
                await ans("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤–∞—à–µ–π –±–µ—Å–µ–¥—ã —É –º–µ–Ω—è –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        elif message == "–î–∞ –∏–ª–∏ –Ω–µ—Ç?":
            await ans(np.random.choice(["–î–∞", "–ù–µ—Ç"], 1)[0])
        elif message == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å.":
            await ans("–°–ø–∞—Å–∏–±–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: https://github.com/Xapulc/TimetableVKBot.")
        else:
            await ans("–ù–µ –∑–Ω–∞—é —á—Ç–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å.")

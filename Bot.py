import asyncio
import json
import numpy as np
from loguru import logger

from vkbottle import Bot, Message
from vkbottle.api.keyboard import Keyboard, Text

from Timetable import Timetable


class TimetableBot(Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        with open("timetable_config.json", "r") as timetable_file:
            self._timetables = {timetable_json.pop("peer_id"): Timetable(timetable_json)
                                for timetable_json in json.load(timetable_file)}

    def _generate_keyboard(self) -> str:
        keyboard = Keyboard()
        keyboard.add_row()
        keyboard.add_button(Text("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."), color="positive")
        keyboard.add_row()
        keyboard.add_button(Text("–î–∞ –∏–ª–∏ –Ω–µ—Ç?"), color="primary")
        keyboard.add_row()
        keyboard.add_button(Text("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å."))
        return keyboard.generate()

    async def get_answer(self, ans: Message, message: str, chat_flg: bool = None):
        logger.info(ans)
        if message == "" or message == ".":
            await ans("–ü—Ä–∏–≤–µ—Ç! üòä", keyboard=self._generate_keyboard())
        elif message == "/get_peer_id":
            await ans(f"peer_id = {ans.peer_id}")
        elif message == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.":
            if ans.peer_id in self._timetables.keys():
                timetable = self._timetables[ans.peer_id]
                await ans(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ \"{timetable}\" –Ω–∞–π–¥–µ–Ω–æ.\n"
                          + f"–ë—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –∑–∞ {timetable.get_before_minutes()} –º–∏–Ω—É—Ç(—ã) –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è.")

                while True:
                    messages = timetable.make_notifications()
                    for message in messages:
                        await ans(message)
                    if len(messages) > 0:
                        await asyncio.sleep(120)
                    else:
                        await asyncio.sleep(15)
            else:
                await ans("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–∞—à–µ–π –±–µ—Å–µ–¥—ã.\n"
                          + "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–ø—É—Å—Ç–∏–≤—à–µ–º—É –º–µ–Ω—è, —á—Ç–æ–±—ã —Ç–æ—Ç –¥–æ–±–∞–≤–∏–ª –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥.")
        elif message == "–î–∞ –∏–ª–∏ –Ω–µ—Ç?":
            await ans(np.random.choice(["–î–∞", "–ù–µ—Ç"], 1)[0])
        elif message == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å.":
            await ans("–°–ø–∞—Å–∏–±–æ! –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç: https://github.com/Xapulc/TimetableVKBot.")
        else:
            await ans("–ù–µ –∑–Ω–∞—é —á—Ç–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å.")